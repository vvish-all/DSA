You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]




/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {  
    
    
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {

                if(l1 != null || l2 != null){
                    if(l1==null){
                        l1 = new ListNode(0);
                    }
                    if(l2==null){
                        l2 = new ListNode(0);
                    }
                }else{
                    return null;
                }
                    
                int sum = l1.val+ l2.val;
                ListNode l3 = new ListNode(sum%10);
                    
                if(sum>=10){
                    if(l2.next==null){
                        l2.next = new ListNode(1);
                    }else{
                         l2.next.val+=1;
                    }
                }               

                 l3.next = addTwoNumbers(l1.next, l2.next);
                 return l3;
                
                
        }
            

    
}
 
